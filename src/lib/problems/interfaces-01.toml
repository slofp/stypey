[problem]
id = "interfaces-01"
title = "インターフェースの定義"
description = """
TypeScriptのインターフェースを使って、複雑なオブジェクトの型を定義しましょう。

目標:
- インターフェースの基本的な定義方法を理解する
- オプショナルプロパティと読み取り専用プロパティを使いこなす
- インターフェースの拡張を理解する
"""
difficulty = "medium"
category = "interfaces"
initialCode = """
// Userインターフェースを定義してください
// 必須: id (number), name (string), email (string)
// オプション: age (number), bio (string)

// ここにUserインターフェースを定義


// AdminUserインターフェースを定義してください
// Userインターフェースを拡張し、permissions (string[]) を追加


// 以下のオブジェクトが型エラーにならないようにしてください
const user: User = {
  id: 1,
  name: "Alice",
  email: "alice@example.com",
  age: 30
};

const admin: AdminUser = {
  id: 2,
  name: "Bob",
  email: "bob@example.com",
  permissions: ["read", "write", "delete"]
};
"""
solution = """
// Userインターフェースを定義してください
// 必須: id (number), name (string), email (string)
// オプション: age (number), bio (string)

interface User {
  readonly id: number;
  name: string;
  email: string;
  age?: number;
  bio?: string;
}

// AdminUserインターフェースを定義してください
// Userインターフェースを拡張し、permissions (string[]) を追加

interface AdminUser extends User {
  permissions: string[];
}

// 以下のオブジェクトが型エラーにならないようにしてください
const user: User = {
  id: 1,
  name: "Alice",
  email: "alice@example.com",
  age: 30
};

const admin: AdminUser = {
  id: 2,
  name: "Bob",
  email: "bob@example.com",
  permissions: ["read", "write", "delete"]
};
"""
hints = [
  "オプショナルプロパティは ? を使います",
  "読み取り専用プロパティは readonly を使います",
  "インターフェースの拡張は extends を使います"
]
tags = ["interfaces", "types", "objects"]

# AST-based Type Assertions
[[typeAssertions]]
symbol = "User"
symbolKind = "interface"
mode = "structural"
description = "User インターフェースが正しく定義されていること"

[typeAssertions.pattern]
kind = "interface"
name = "User"

[[typeAssertions.pattern.properties]]
name = "id"
readonly = true
[typeAssertions.pattern.properties.type]
kind = "primitive"
type = "number"

[[typeAssertions.pattern.properties]]
name = "name"
[typeAssertions.pattern.properties.type]
kind = "primitive"
type = "string"

[[typeAssertions.pattern.properties]]
name = "email"
[typeAssertions.pattern.properties.type]
kind = "primitive"
type = "string"

[[typeAssertions.pattern.properties]]
name = "age"
optional = true
[typeAssertions.pattern.properties.type]
kind = "primitive"
type = "number"

[[typeAssertions.pattern.properties]]
name = "bio"
optional = true
[typeAssertions.pattern.properties.type]
kind = "primitive"
type = "string"

# ----------------------------------------------------------------------------

[[typeAssertions]]
symbol = "AdminUser"
symbolKind = "interface"
mode = "structural"
description = "AdminUser インターフェースが User を拡張し、permissions を持つこと"

[typeAssertions.pattern]
kind = "interface"
name = "AdminUser"

# AdminUser extends User のプロパティ
[[typeAssertions.pattern.properties]]
name = "id"
readonly = true
[typeAssertions.pattern.properties.type]
kind = "primitive"
type = "number"

[[typeAssertions.pattern.properties]]
name = "name"
[typeAssertions.pattern.properties.type]
kind = "primitive"
type = "string"

[[typeAssertions.pattern.properties]]
name = "email"
[typeAssertions.pattern.properties.type]
kind = "primitive"
type = "string"

[[typeAssertions.pattern.properties]]
name = "age"
optional = true
[typeAssertions.pattern.properties.type]
kind = "primitive"
type = "number"

[[typeAssertions.pattern.properties]]
name = "bio"
optional = true
[typeAssertions.pattern.properties.type]
kind = "primitive"
type = "string"

[[typeAssertions.pattern.properties]]
name = "permissions"
[typeAssertions.pattern.properties.type]
kind = "array"
[typeAssertions.pattern.properties.type.elementType]
kind = "primitive"
type = "string"

# ----------------------------------------------------------------------------

[[typeAssertions]]
symbol = "user"
symbolKind = "variable"
mode = "assignable"
description = "user は User インターフェース型に代入可能であること"

[typeAssertions.pattern]
kind = "generic"
typeName = "User"

# ----------------------------------------------------------------------------

[[typeAssertions]]
symbol = "admin"
symbolKind = "variable"
mode = "assignable"
description = "admin は AdminUser インターフェース型に代入可能であること"

[typeAssertions.pattern]
kind = "generic"
typeName = "AdminUser"