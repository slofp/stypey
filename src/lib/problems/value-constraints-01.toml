# Problem: Value Constraints
id = "value-constraints-01"
title = "値の制約"
difficulty = "easy"
category = "constraints"
description = """
値の制約を使って、ビジネスルールに準拠した型を定義します。

要件：
1. 年齢は0-150の範囲
2. メールアドレスは@を含む文字列
3. ステータスは特定の値のみ許可（'active', 'inactive', 'pending'）
4. IDは8文字以上16文字以下
"""

starterCode = """
// 年齢の範囲制約を満たすように修正
const age = -5;

// メールアドレスの形式を満たすように修正
const email = "invalid-email";

// 許可されたステータス値を使用
type Status = string;
const userStatus: Status = "invalid";

// ID長さの制約を満たすように修正
const userId = "abc";
"""

solution = """
// 年齢は0-150の範囲
const age = 25;

// メールアドレスは@を含む
const email = "user@example.com";

// 許可されたステータス値のみ
type Status = 'active' | 'inactive' | 'pending';
const userStatus: Status = 'active';

// IDは8-16文字
const userId = "user12345";
"""

hints = [
  "年齢は0以上150以下の値にします",
  "メールアドレスには@記号を含めます",
  "Statusはリテラル型のUnionで定義します",
  "userIdは最低8文字必要です"
]

[[typeAssertions]]
symbol = "age"
symbolKind = "variable"
pattern = { kind = "literal", value = 25 }
mode = "assignable"
description = "年齢の変数"

[typeAssertions.constraints]
enabled = true
[typeAssertions.constraints.value]
numericRange = { min = 0, max = 150 }

[typeAssertions.constraints.lint]
level = "error"
message = "年齢は0-150の範囲である必要があります"

[[typeAssertions]]
symbol = "email"
symbolKind = "variable"
pattern = { kind = "primitive", type = "string" }
mode = "exact"
description = "メールアドレス"

[typeAssertions.constraints]
enabled = true
[typeAssertions.constraints.value]
stringPattern = ".*@.*"

[typeAssertions.constraints.lint]
level = "error"
message = "メールアドレスには@記号が必要です"
suggestion = "example@domain.com の形式で入力してください"

[[typeAssertions]]
symbol = "Status"
symbolKind = "type"
pattern = {
  kind = "union",
  types = [
    { kind = "literal", value = "active" },
    { kind = "literal", value = "inactive" },
    { kind = "literal", value = "pending" }
  ]
}
mode = "exact"
description = "ステータス型"

[[typeAssertions]]
symbol = "userStatus"
symbolKind = "variable"
pattern = { 
  kind = "union",
  types = [
    { kind = "literal", value = "active" },
    { kind = "literal", value = "inactive" },
    { kind = "literal", value = "pending" }
  ]
}
mode = "assignable"
description = "ユーザーステータス"

[typeAssertions.constraints]
enabled = true
[typeAssertions.constraints.value]
allowedValues = ["active", "inactive", "pending"]

[typeAssertions.constraints.lint]
level = "error"
message = "ステータスは 'active', 'inactive', 'pending' のいずれかである必要があります"

[[typeAssertions]]
symbol = "userId"
symbolKind = "variable"
pattern = { kind = "primitive", type = "string" }
mode = "exact"
description = "ユーザーID"

[typeAssertions.constraints]
enabled = true
[typeAssertions.constraints.value]
stringLength = { min = 8, max = 16 }

[typeAssertions.constraints.lint]
level = "error"
message = "ユーザーIDは8文字以上16文字以下である必要があります"