[problem]
id = "type-basics-01"
title = "基本的な型注釈"
description = """
TypeScriptの基本的な型注釈を学びましょう。
変数に適切な型を付けて、型エラーを解消してください。

目標:
- 文字列、数値、真偽値の型注釈を理解する
- 型推論と明示的な型注釈の違いを理解する
"""
difficulty = "easy"
category = "basics"
initialCode = """
// 以下の変数に適切な型注釈を付けてください

const userName = "Alice";
const userAge = 25;
const isActive = true;

// 配列の型注釈
const numbers = [1, 2, 3, 4, 5];
const words = ["hello", "world"];

// オブジェクトの型注釈
const user = {
  id: 1,
  name: "Bob",
  email: "bob@example.com"
};

// 関数の型注釈
function greet(name) {
  return `Hello, ${name}!`;
}
"""
solution = """
// 以下の変数に適切な型注釈を付けてください

const userName: string = "Alice";
const userAge: number = 25;
const isActive: boolean = true;

// 配列の型注釈
const numbers: number[] = [1, 2, 3, 4, 5];
const words: string[] = ["hello", "world"];

// オブジェクトの型注釈
const user: {
  id: number;
  name: string;
  email: string;
} = {
  id: 1,
  name: "Bob",
  email: "bob@example.com"
};

// 関数の型注釈
function greet(name: string): string {
  return `Hello, ${name}!`;
}
"""
hints = [
  "基本的な型は string, number, boolean です",
  "配列の型は Type[] または Array<Type> で表現できます",
  "関数の引数と戻り値にも型を付けることができます"
]
tags = ["basics", "types", "annotations"]

# AST-based Type Assertions
[[typeAssertions]]
symbol = "userName"
symbolKind = "variable"
mode = "exact"
description = "userName は string 型であること"

[typeAssertions.pattern]
kind = "primitive"
type = "string"

# ----------------------------------------------------------------------------

[[typeAssertions]]
symbol = "userAge"
symbolKind = "variable"
mode = "exact"
description = "userAge は number 型であること"

[typeAssertions.pattern]
kind = "primitive"
type = "number"

# ----------------------------------------------------------------------------

[[typeAssertions]]
symbol = "isActive"
symbolKind = "variable"
mode = "exact"
description = "isActive は boolean 型であること"

[typeAssertions.pattern]
kind = "primitive"
type = "boolean"

# ----------------------------------------------------------------------------

[[typeAssertions]]
symbol = "numbers"
symbolKind = "variable"
mode = "structural"
description = "numbers は number[] 型であること"

[typeAssertions.pattern]
kind = "array"

[typeAssertions.pattern.elementType]
kind = "primitive"
type = "number"

# ----------------------------------------------------------------------------

[[typeAssertions]]
symbol = "words"
symbolKind = "variable"
mode = "structural"
description = "words は string[] 型であること"

[typeAssertions.pattern]
kind = "array"

[typeAssertions.pattern.elementType]
kind = "primitive"
type = "string"

# ----------------------------------------------------------------------------

[[typeAssertions]]
symbol = "user"
symbolKind = "variable"
mode = "structural"
description = "user は適切なオブジェクト型であること"

[typeAssertions.pattern]
kind = "object"
allowExtraProperties = false

[[typeAssertions.pattern.properties]]
name = "id"
[typeAssertions.pattern.properties.type]
kind = "primitive"
type = "number"

[[typeAssertions.pattern.properties]]
name = "name"
[typeAssertions.pattern.properties.type]
kind = "primitive"
type = "string"

[[typeAssertions.pattern.properties]]
name = "email"
[typeAssertions.pattern.properties.type]
kind = "primitive"
type = "string"

# ----------------------------------------------------------------------------

[[typeAssertions]]
symbol = "greet"
symbolKind = "function"
mode = "structural"
description = "greet は string を受け取り string を返す関数であること"

[typeAssertions.pattern]
kind = "function"

[[typeAssertions.pattern.parameters]]
name = "name"
[typeAssertions.pattern.parameters.type]
kind = "primitive"
type = "string"

[typeAssertions.pattern.returnType]
kind = "primitive"
type = "string"