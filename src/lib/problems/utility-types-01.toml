[problem]
id = "utility-types-01"
title = "ユーティリティ型の活用"
description = """
TypeScriptの組み込みユーティリティ型を使って、既存の型を変換しましょう。

目標:
- Partial, Required, Readonly の使い方
- Pick, Omit の使い方
- Record, Exclude, Extract の使い方
"""
difficulty = "medium"
category = "utility-types"
initialCode = """
interface User {
  id: number;
  name: string;
  email: string;
  age?: number;
  isActive: boolean;
}

// 1. すべてのプロパティをオプショナルにする
type PartialUser = any;

// 2. すべてのプロパティを必須にする
type RequiredUser = any;

// 3. 特定のプロパティだけを取り出す (id, name, email)
type UserBasicInfo = any;

// 4. 特定のプロパティを除外する (isActive を除外)
type UserWithoutStatus = any;

// 5. すべてのプロパティを読み取り専用にする
type ReadonlyUser = any;

// 6. 文字列のキーと数値の値を持つオブジェクト型を作る
type StringNumberMap = any;

// 7. Union型から特定の型を除外する
type Status = 'pending' | 'success' | 'error' | 'cancelled';
type ActiveStatus = any; // 'cancelled' を除外

// 使用例
function updateUser(user: PartialUser): void {
  // 部分的な更新が可能
}

function createUser(user: RequiredUser): void {
  // すべてのフィールドが必要
}
"""
solution = """
interface User {
  id: number;
  name: string;
  email: string;
  age?: number;
  isActive: boolean;
}

// 1. すべてのプロパティをオプショナルにする
type PartialUser = Partial<User>;

// 2. すべてのプロパティを必須にする
type RequiredUser = Required<User>;

// 3. 特定のプロパティだけを取り出す (id, name, email)
type UserBasicInfo = Pick<User, 'id' | 'name' | 'email'>;

// 4. 特定のプロパティを除外する (isActive を除外)
type UserWithoutStatus = Omit<User, 'isActive'>;

// 5. すべてのプロパティを読み取り専用にする
type ReadonlyUser = Readonly<User>;

// 6. 文字列のキーと数値の値を持つオブジェクト型を作る
type StringNumberMap = Record<string, number>;

// 7. Union型から特定の型を除外する
type Status = 'pending' | 'success' | 'error' | 'cancelled';
type ActiveStatus = Exclude<Status, 'cancelled'>; // 'cancelled' を除外

// 使用例
function updateUser(user: PartialUser): void {
  // 部分的な更新が可能
}

function createUser(user: RequiredUser): void {
  // すべてのフィールドが必要
}
"""
hints = [
  "Partial<T> はすべてのプロパティをオプショナルにします",
  "Pick<T, K> は指定したキーのプロパティだけを取り出します",
  "Exclude<T, U> はUnion型から特定の型を除外します"
]
tags = ["utility", "types", "transformation", "builtin"]
# AST-based Type Assertions
[[typeAssertions]]
symbol = "User"
symbolKind = "interface"
mode = "structural"
description = "基本となるUserインターフェース"

[typeAssertions.pattern]
kind = "interface"
name = "User"

[[typeAssertions.pattern.properties]]
name = "id"
[typeAssertions.pattern.properties.type]
kind = "primitive"
type = "number"

[[typeAssertions.pattern.properties]]
name = "name"
[typeAssertions.pattern.properties.type]
kind = "primitive"
type = "string"

[[typeAssertions.pattern.properties]]
name = "email"
[typeAssertions.pattern.properties.type]
kind = "primitive"
type = "string"

[[typeAssertions.pattern.properties]]
name = "age"
optional = true
[typeAssertions.pattern.properties.type]
kind = "primitive"
type = "number"

[[typeAssertions.pattern.properties]]
name = "isActive"
[typeAssertions.pattern.properties.type]
kind = "primitive"
type = "boolean"

# ----------------------------------------------------------------------------

[[typeAssertions]]
symbol = "PartialUser"
symbolKind = "type"
mode = "assignable"
description = "すべてのプロパティをオプショナルにしたUser"

[typeAssertions.pattern]
kind = "generic"
typeName = "Partial"

[[typeAssertions.pattern.typeArguments]]
kind = "generic"
typeName = "User"

# ----------------------------------------------------------------------------

[[typeAssertions]]
symbol = "RequiredUser"
symbolKind = "type"
mode = "assignable"
description = "すべてのプロパティを必須にしたUser"

[typeAssertions.pattern]
kind = "generic"
typeName = "Required"

[[typeAssertions.pattern.typeArguments]]
kind = "generic"
typeName = "User"

# ----------------------------------------------------------------------------

[[typeAssertions]]
symbol = "UserBasicInfo"
symbolKind = "type"
mode = "assignable"
description = "特定のプロパティのみを抽出したUser"

[typeAssertions.pattern]
kind = "generic"
typeName = "Pick"

[[typeAssertions.pattern.typeArguments]]
kind = "generic"
typeName = "User"

[[typeAssertions.pattern.typeArguments]]
kind = "union"
[[typeAssertions.pattern.typeArguments.types]]
kind = "literal"
value = "id"
[[typeAssertions.pattern.typeArguments.types]]
kind = "literal"
value = "name"
[[typeAssertions.pattern.typeArguments.types]]
kind = "literal"
value = "email"

# ----------------------------------------------------------------------------

[[typeAssertions]]
symbol = "UserWithoutStatus"
symbolKind = "type"
mode = "assignable"
description = "特定のプロパティを除外したUser"

[typeAssertions.pattern]
kind = "generic"
typeName = "Omit"

[[typeAssertions.pattern.typeArguments]]
kind = "generic"
typeName = "User"

[[typeAssertions.pattern.typeArguments]]
kind = "literal"
value = "isActive"

# ----------------------------------------------------------------------------

[[typeAssertions]]
symbol = "ReadonlyUser"
symbolKind = "type"
mode = "assignable"
description = "読み取り専用にしたUser"

[typeAssertions.pattern]
kind = "generic"
typeName = "Readonly"

[[typeAssertions.pattern.typeArguments]]
kind = "generic"
typeName = "User"

# ----------------------------------------------------------------------------

[[typeAssertions]]
symbol = "StringNumberMap"
symbolKind = "type"
mode = "structural"
description = "文字列キーと数値値のマップ"

[typeAssertions.pattern]
kind = "generic"
typeName = "Record"

[[typeAssertions.pattern.typeArguments]]
kind = "primitive"
type = "string"

[[typeAssertions.pattern.typeArguments]]
kind = "primitive"
type = "number"

# ----------------------------------------------------------------------------

[[typeAssertions]]
symbol = "Status"
symbolKind = "type"
mode = "structural"
description = "ステータスのUnion型"

[typeAssertions.pattern]
kind = "union"

[[typeAssertions.pattern.types]]
kind = "literal"
value = "pending"

[[typeAssertions.pattern.types]]
kind = "literal"
value = "success"

[[typeAssertions.pattern.types]]
kind = "literal"
value = "error"

[[typeAssertions.pattern.types]]
kind = "literal"
value = "cancelled"

# ----------------------------------------------------------------------------

[[typeAssertions]]
symbol = "ActiveStatus"
symbolKind = "type"
mode = "assignable"
description = "cancelledを除外したステータス"

[typeAssertions.pattern]
kind = "generic"
typeName = "Exclude"

[[typeAssertions.pattern.typeArguments]]
kind = "generic"
typeName = "Status"

[[typeAssertions.pattern.typeArguments]]
kind = "literal"
value = "cancelled"

# ----------------------------------------------------------------------------

[[typeAssertions]]
symbol = "updateUser"
symbolKind = "function"
mode = "structural"
description = "部分的なUserで更新する関数"

[typeAssertions.pattern]
kind = "function"

[[typeAssertions.pattern.parameters]]
name = "user"
[typeAssertions.pattern.parameters.type]
kind = "generic"
typeName = "PartialUser"

[typeAssertions.pattern.returnType]
kind = "primitive"
type = "void"

# ----------------------------------------------------------------------------

[[typeAssertions]]
symbol = "createUser"
symbolKind = "function"
mode = "structural"
description = "完全なUserで作成する関数"

[typeAssertions.pattern]
kind = "function"

[[typeAssertions.pattern.parameters]]
name = "user"
[typeAssertions.pattern.parameters.type]
kind = "generic"
typeName = "RequiredUser"

[typeAssertions.pattern.returnType]
kind = "primitive"
type = "void"